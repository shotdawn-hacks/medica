# -*- coding: utf-8 -*-
"""DataProcessor

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1prhaoN0YITyuTb97kcDNWY99IUDvh8Az
"""

import pandas as pd
import json
import ast

class DataProcessor:
    def __init__(self, data_loaded, data_standard, data_standard_sppvr):
        self.data_loaded = data_loaded
        self.data_standard = data_standard
        self.data_standard_sppvr = data_standard_sppvr
        self.result = pd.DataFrame(columns=['ICD-10_Code', 'Appointments',
                                            'Correct_Appointment', 'Possible_Correct_Appointment',
                                            'Wrong_Appointment', 'Correct_But_Not_Accounted'])
    
    def load_data(self, json_file):
        with open(json_file, 'r') as file:
            data = json.load(file)
        self.data_loaded = pd.DataFrame(data)
        self.data_loaded.columns = ['ICD-10_Code', 'Appointments']
    
    def process_data(self):
        self.data_loaded['Appointments'] = self.data_loaded['Appointments'].apply(lambda x: x.strip().split('\n'))
        self.data_standard_sppvr['Required_Appointments'] = self.data_standard_sppvr['Required_Appointments'].apply(ast.literal_eval)
        self.data_standard_sppvr['Optional_Appointments'] = self.data_standard_sppvr['Optional_Appointments'].apply(ast.literal_eval)
        self.data_standard['Required_Appointments'] = self.data_standard['Required_Appointments'].apply(ast.literal_eval)
        self.data_standard['Optional_Appointments'] = self.data_standard['Optional_Appointments'].apply(ast.literal_eval)
        
        for index, row in self.data_loaded.iterrows():
            code = row['ICD-10_Code']
            appointment = row['Appointments']

            matching_row = self.data_standard_sppvr[self.data_standard_sppvr['ICD-10_Code'].str.strip() == code.strip()]

            if len(matching_row) == 0:
                matching_row = self.data_standard[self.data_standard['ICD-10_Code'].str.strip() == code.strip()]

            if len(matching_row) == 0:
                continue

            required_appointments = matching_row['Required_Appointments'].iloc[0]
            optional_appointments = matching_row['Optional_Appointments'].iloc[0]

            correct_appointment = []
            possible_correct_appointment = []
            wrong_appointment = []
            missed_appointment = []

            for app in appointment:
                if app.strip() in required_appointments:
                    correct_appointment.append(app)
                elif app.strip() in optional_appointments:
                    possible_correct_appointment.append(app)
                else:
                    wrong_appointment.append(app)

            for req_app in required_appointments:
                if req_app.strip() not in appointment:
                    missed_appointment.append(req_app)

            self.result.loc[index] = {
                'ICD-10_Code': code,
                'Appointments': appointment,
                'Correct_Appointment': correct_appointment,
                'Possible_Correct_Appointment': possible_correct_appointment,
                'Wrong_Appointment': wrong_appointment,
                'Correct_But_Not_Accounted': missed_appointment
            }
    
    def get_result(self):
        return self.result.to_json(orient='records', force_ascii=False)